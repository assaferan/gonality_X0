// this code gives a lower bound on the gonality of X_0(130)
load "new_models.m";
X:= eqs_quos(130,[]);
D:=DefiningEquations(X);
D2:=[];
for i:=1 to #D do
p:=D[i];
l:=LCM([Denominator(a):a in Coefficients(p)]);
p:=p*l;
D2:=D2 cat [p];
end for;
C:=Scheme(ProjectiveSpace(Rationals(),Genus(X)-1),D2);
C2:=ChangeRing(C,GF(3));
FF := FunctionField(C2);
AFF := AlgorithmicFunctionField(FF);
pls1:=Places(AFF,1);
pls2:=Places(AFF,2);
#pls1,#pls2;
pls3:=Places(AFF,3);


//7*1
s:={};
for i:=1 to #pls1 do
i;
s;
s:=s  join {Dimension(RiemannRochSpace(7*pls1[i]))};
end for;
s;
//returns 1;

//5*1+2
s:={};
for i:=1 to #pls1 do
i;
s;
for k:=1 to #pls2 do
s:=s  join {Dimension(RiemannRochSpace(5*pls1[i]+pls2[k]))};
end for;
end for;
s;
//returns 1;

//4*1+3
s:={};
for i:=1 to #pls1 do
i;
s;
for k:=1 to #pls3 do
s:=s  join {Dimension(RiemannRochSpace(4*pls1[i]+pls3[k]))};
end for;
end for;
s;
//returns 1;


//prvo pretpostavimo da ima 1 funkcija s 1 toƒçkom
//1+3+3
s:={};
for i:=1 to #pls1 do
i;
s;
for k:=1 to #pls3 do
for j:=1 to #pls3 do
s:=s  join {Dimension(RiemannRochSpace(pls1[i]+pls3[k]+pls3[j]))};
end for;
end for;
end for;
s;
//returns 1


//1+4+2
pls4:=Places(AFF,4);
s:={};
for i:=1 to #pls1 do
i;
s;
for k:=1 to #pls2 do
for j:=1 to #pls4 do
s:=s  join {Dimension(RiemannRochSpace(pls1[i]+pls2[k]+pls4[j]))};
end for;
end for;
end for;
s;

//returns 1

//2*1+3+2

s:={};
for i:=1 to #pls1 do
i;
s;
for k:=1 to #pls2 do
for j:=1 to #pls3 do
s:=s  join {Dimension(RiemannRochSpace(2*pls1[i]+pls2[k]+pls3[j]))};
end for;
end for;
end for;
s;
//returns 1;

//3*1+2+2

s:={};
for i:=1 to #pls1 do
i;
s;
for k:=1 to #pls2 do
for j:=1 to #pls2 do
s:=s  join {Dimension(RiemannRochSpace(3*pls1[i]+pls2[k]+pls2[j]))};
end for;
end for;
end for;
s;
//returns 1;


//1 +2+2+2
s:={};
for i:=1 to #pls1 do
i;
s;
for k:=1 to #pls2 do
for j:=k to #pls2 do
for m:=j to #pls2 do
s:=s  join {Dimension(RiemannRochSpace(pls1[i]+pls2[k]+pls2[j]+pls2[m]))};
end for;
end for;
end for;
end for;
s;
//returns 1;



//1+6
pls6:=Places(AFF,6);
s:={};
for i:=1 to #pls1 do
i;
s;
for p in pls6 do
s:=s  join {Dimension(RiemannRochSpace(pls1[i]+p))};
end for;
end for;
s;
//returns 1;


//2*1+5
pls5:=Places(AFF,5);
s:={};
for i:=1 to #pls1 do
i;
s;
for p in pls5 do
s:=s  join {Dimension(RiemannRochSpace(2*pls1[i]+p))};
end for;
end for;
s;
//returns 1;

//0+7? -not needed 
pls7:=Places(AFF,7);
s:={};
for p in pls7 do
s:=s  join {Dimension(RiemannRochSpace(p))};
end for;
s;
//returns 1;

//////////////// 1 point - finshed

//suppose 2 pts, 1 is pls1[1]


//2*P+1+2+2
P:=pls1[1];

s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;
for j:=1 to #pls2 do
for m:=j to #pls2 do
s:=s  join {Dimension(RiemannRochSpace(2*P+1*pls1[k]+pls2[j]+pls2[m]))};
end for;
end for;
end for;
s;
//returns 1;



//P+2*1+2+2

P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;
for j:=1 to #pls2 do
for m:=j to #pls2 do
s:=s  join {Dimension(RiemannRochSpace(P+2*pls1[k]+pls2[j]+pls2[m]))};
end for;
end for;
end for;
s;
//returns 1;

//2*P+2*1+3

P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;
for j:=1 to #pls3 do
s:=s  join {Dimension(RiemannRochSpace(2*P+2*pls1[k]+pls3[j]))};
end for;
end for;
s;
//returns 1;



//3*P+1+3

P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;
for j:=1 to #pls3 do
s:=s  join {Dimension(RiemannRochSpace(3*P+1*pls1[k]+pls3[j]))};
end for;
end for;
s;
//returns 1;


//P+3*1+3

P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;
for j:=1 to #pls3 do
s:=s  join {Dimension(RiemannRochSpace(P+3*pls1[k]+pls3[j]))};
end for;
end for;
s;
//returns 1;


//4*1+3*1
P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;

s:=s  join {Dimension(RiemannRochSpace(4*P+3*pls1[k]))};
end for;
s;
//returns 1;

//5*1+2*1
P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;

s:=s  join {Dimension(RiemannRochSpace(5*P+2*pls1[k]))};
end for;
s;
//returns 1;


//4*1+3*1
P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;

s:=s  join {Dimension(RiemannRochSpace(4*P+3*pls1[k]))};
end for;
s;
//returns 1;

//2*1+5*1
P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;
s:=s  join {Dimension(RiemannRochSpace(2*P+1*pls1[k]))};
end for;
s;
//returns 1;


//3*1+4*1
P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;
s:=s  join {Dimension(RiemannRochSpace(3*P+4*pls1[k]))};
end for;
s;
//returns 1;

//6*1+1*1
P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;
s:=s  join {Dimension(RiemannRochSpace(6*P+1*pls1[k]))};
end for;
s;
//returns 1;

//1*1+6*1
P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;
s:=s  join {Dimension(RiemannRochSpace(1*P+6*pls1[k]))};
end for;
s;
//returns 1;

//1*1+1*1+5
P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;
for p in Places(AFF,5) do
s:=s  join {Dimension(RiemannRochSpace(1*P+1*pls1[k]+p))};
end for;
end for;
s;
//returns 1;

//1*1+1*1+3+2
P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;
for p in pls3 do
for q in pls2 do
s:=s  join {Dimension(RiemannRochSpace(1*P+1*pls1[k]+p))};
end for;
end for;
end for;
s;
//returns 1;

//2*1+1*1+4+2
pls4:=Places(AFF,4);
P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;
for p in pls4 do
s:=s  join {Dimension(RiemannRochSpace(2*P+1*pls1[k]+p))};
end for;
end for;
s;
//returns 1;

//1*1+*1+4+2
pls4:=Places(AFF,4);
P:=pls1[1];
s:={};
i;
s;
for k:=1 to #pls1 do
k;
s;
for p in pls4 do
s:=s  join {Dimension(RiemannRochSpace(2*P+1*pls1[k]+p))};
end for;
end for;
s;
//returns 1;